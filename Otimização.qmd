---
title: "Otimizacao de carteiras"
author: "Marcus Ramalho"
format: html
editor: visual
---

## Introdução à otimização de carteiras com R

## Função de utilidade quadrática

A função de utilidade quadrática é usada na otimização de portfólios para encontrar a alocação de ativos que maximiza o retorno esperado e minimiza o risco. A função de utilidade quadrática é dada por:

$U = \mu^T w - \lambda \sigma^2$

onde:

- $U$ é a função de utilidade
- $\mu^T$ é o vetor de retornos esperados
- $w$ é o vetor de pesos dos ativos
- $\lambda$ é o fator de aversão ao risco

generalizando para o caso de $n$ ativos, a função de utilidade quadrática é dada por:

$U = \mu^T w - \lambda w^T \Sigma w$

onde:

- $\Sigma w$ é a matriz de covariância dos retornos dos ativos
- $w^T$ é o vetor transposto de pesos dos ativos
- $w$ é o vetor de pesos dos ativos
- $\lambda$ é o fator de aversão ao risco
- $\mu$ é o vetor de retornos esperados
- $U$ é a função de utilidade

A otimização de portfólios é um problema de maximização da função de utilidade quadrática sujeita a restrições, como a soma dos pesos dos ativos deve ser igual a 1 e os pesos dos ativos devem ser maiores ou iguais a zero.

## Primeiro vamos carregar os pacotes necessários

```{r}
#| message: false
#| warning: false
#| error: false
#| echo: false

# Lista de pacotes necessários
pacotes <- c("tidyverse", "PortfolioAnalytics", "quantmod", "ROI", "ROI.plugin.quadprog", "ROI.plugin.glpk","DEoptim", "timetk", "PerformanceAnalytics")

# Verifica se os pacotes estão instalados, instala os que faltam
for (pacote in pacotes) {
  if (!require(pacote, character.only = TRUE)) {
    install.packages(pacote)
    library(pacote, character.only = TRUE)
  }
}

```

## Ativos selecionados 

```{r}

# Ativos selecionados

tickers <- c("VALE3.SA","PETR4.SA","AZUL4.SA","MGLU3.SA", "CMIG4.SA")

prices <- 
  getSymbols(tickers, 
             src = 'yahoo', 
             from = "2019-05-30",
             to = "2024-05-30",
             auto.assign = TRUE, #obs auto asign carrega os resultados para o ambiente
             warnings = FALSE,) %>% 
  map(~Ad(get(.))) %>% 
  reduce(merge) %>%
  `colnames<-`(tickers)

head(prices)
class(prices)
```

## Baixando os preços do benchmark 

```{r}
# Baixando os preços do IBOV

ibov <- getSymbols("^BVSP", 
                   src = 'yahoo', 
                   from = "2019-05-30",
                   to = "2024-05-30",
                   auto.assign = TRUE, 
                   warnings = FALSE) %>% 
  map(~Ad(get(.))) %>% 
  reduce(merge) %>% 
  `colnames<-`("IBOV")

head(ibov)

```

## Agora vamos converter os preços diários em mensais

```{r}
#| echo: true
#| message: false


prices_monthly <- to.monthly(prices, indexAt = "lastof", OHLC = FALSE)
head(prices_monthly)

ibov_monthly <- to.monthly(ibov, indexAt = "lastof", OHLC = FALSE)
head(ibov_monthly)
```

## Vamos calcular os retornos mensais

```{r}
asset_returns_xts <-
 PerformanceAnalytics::Return.calculate(prices_monthly, 
                   method = "discrete") %>% 
  na.omit()

ibov_returns_xts <- 
  PerformanceAnalytics::Return.calculate(ibov_monthly, 
                   method = "discrete") %>% 
  na.omit()

head(asset_returns_xts)
head(ibov_returns_xts)
```

## Otimização da carteira

```{r}

#| message: false

# Criando o objeto de otimização

portf <- portfolio.spec(assets = colnames(asset_returns_xts))

# Adicionando restrições, como por exemplo, a soma dos pesos dos ativos deve ser igual a 1

portf <- add.constraint(portf, type = "full_investment")

# Adicionando restrição de peso mínimo e máximo para cada ativo
# Neste caso, o peso mínimo é 0 e o peso máximo é 1

portf <- add.constraint(portf, type = "long_only")


# Adiciona a função objetivo, que é minimizar o desvio padrão da carteira

portf <- add.objective(portf, type = "risk", name = "StdDev")

# Resolve o problema de otimização

opt_portf <- optimize.portfolio(asset_returns_xts, portf, optimize_method = "ROI")

```

## Resultados da otimização

```{r}

opt_portf

```

## Extraindo os pesos dos ativos

```{r}


# extraindo os pesos para um data frame
weights <- extractWeights(opt_portf)

# Adicionando os nomes dos ativos sem colocá-los no índice
weights <- data.frame(tickers = colnames(asset_returns_xts), weights, row.names = NULL)

weights




```

## plotando com o portfolioAnalytics

```{r}

chart.Weights(opt_portf)

```

## Plotando com ggplo2

```{r}

ggplot(weights, aes(x = reorder(tickers, weights), y = weights, fill = tickers)) +
  geom_col(color = "black", show.legend = FALSE) +
  theme_minimal(base_size = 14) +
  theme(axis.text.x = element_text(angle = 90, hjust = 1),
    plot.title = element_text(hjust = 0.5, size = 20, face = "bold"),
    plot.subtitle = element_text(hjust = 0.5, size = 16),
    legend.position = "none") +
  scale_fill_viridis_d() +
  labs(title = "Distribuição dos Pesos dos Ativos",
   x = "Ativos",
   y = "Pesos") +
  coord_flip()

```


## Realizando otimização da função de utilidade com o PortfolioAnalytics

```{r}

#criar o objeto de otimização

portf <- portfolio.spec(assets = colnames(asset_returns_xts))

# Adicionando restrições, como por exemplo, a soma dos pesos dos ativos deve ser igual a 1

portf <- add.constraint(portf, type = "full_investment")

# Adicionando restrição de peso mínimo e máximo para cada ativo (0-1)

portf <- add.constraint(portf, type = "long_only")

# Adiciona a função objetivo, que é maximizar o retorno esperado

portf <- add.objective(portf, type = "return", name = "mean")

# Adiciona a função objetivo, que é minimizar a variância da carteira

portf <- add.objective(portf, type = "risk", name = "var")

portf <- add.objective(portf, type = "quadratic_utility", risk_aversion = 10)

# Resolve o problema de otimização

opt_portf <- optimize.portfolio(asset_returns_xts, portf, optimize_method = "ROI")

# Extraindo os pesos dos ativos

extractWeights(opt_portf)

```

## Pesos

```{r}


extractWeights(opt_portf)

```

## Entendendo a especificação do portfólio

O objeto de portfólio é uma lista que contém as seguintes informações:

- **assets**: vetor de nomes dos ativos
- **constraints**: lista de restrições
  - **weight_sum**: restrição de que a soma dos pesos dos ativos deve ser igual a um valor específico
  - **full_investment**: restrição de que a soma dos pesos dos ativos deve ser igual a 1
  - **dollar_neutral**: restrição de que a soma dos pesos dos ativos deve ser igual a zero
  - **box**: restrição de que os pesos dos ativos devem estar dentro de um intervalo específico
  - **long_only**: restrição de que os pesos dos ativos devem ser maiores ou iguais a zero e menores ou iguais a um (caso especial da restrição box)
  - **group**: restrição de que os pesos dos ativos de um grupo específico devem ser iguais
  - **turnover**: restrição de que o turnover da carteira deve ser menor ou igual a um valor específico a partir de uma carteira inicial
  - **diversification**: Especifica um valor de diversificação para a carteira
  - **position_limit**: Permite ao usuário definir o número máximo de posições (ativos com pesos não nulos) e o número máximo de posições compradas e vendidas.
  - **return**: Especifica o retorno médio esperado da carteira
  - **factor_exposure**: Especifica a exposição da carteira a fatores de risco
  - **leverage_exposure**: Especifica a alavancagem maxima da carteira onde a alavancagem é definida como a soma dos pesos absolutos dos ativos
- **objectives**: 
  - **type**: 'return','risk', 'risk_budget', 'quadratic_utility', or 'weight_concentration

## Passo a passo da otimização de portfólios

1. Carregar os preços dos ativos e do benchmark
2. Converter os preços diários em preços mensais
3. Calcular os retornos mensais dos ativos e do benchmark
4. **Criar o objeto de portfólio**
5. **Adicionar restrições ao objeto de portfólio**
6. **Adicionar a função objetivo ao objeto de portfólio**
7. **Resolver o problema de otimização**
8. **Exibir os resultados da otimização**
9. **Exibir os pesos dos ativos na carteira otimizada**
10. **Plotar a distribuição dos pesos dos ativos na carteira otimizada**

## Criando um objeto para as especificações do portfólio

```{r}

# Criando o objeto de portfólio, aqui estamos apenas especificando os ativos que serão utilizados na otimização

port_spec <- portfolio.spec(assets = colnames(asset_returns_xts))

class(port_spec)

```

## Adicionando restrições ao objeto de portfólio

As restrições são condições que devem ser satisfeitas durante a otimização da carteira. Algumas restrições comuns são relacionadas ao peso dos ativos e ao retorno esperado da carteira.

```{r}

# Adicionando restrições, como por exemplo, a soma dos pesos dos ativos deve ser igual a 1

port_spec  <- add.constraint(port_spec, type = "weight_sum", min_sum = 1, max_sum = 1)

# adicionnando uma restrição de caixas para os pesos dos ativos

port_spec <- add.constraint(port_spec, type = "box", min = c(0.2, 0.1, 0.1, 0.1, 0.1), max = 0.4)


print(port_spec)


```

## Adicionando a função objetivo ao objeto de portfólio

A função objetivo é a função que será otimizada durante o processo de otimização da carteira. Um objetivo comum é maximizar o retorno esperado da carteira e minimizar a volatilidade e o risco.

Lembre-se que o desvio padrão é a raiz quadrada da variância. E que a variância é a média dos quadrados dos desvios em relação à média. 
A variancia é geralmente usada para denotar o risco, quanto maior a variancia, maior o risco. Já geralmente denota a volatilidade, quanto maior o desvio padrão, maior a volatilidade. Ambas são medidas que servem como indicadores de risco.

No portfolioAnalytics, a função objetivo é adicionada ao objeto de portfólio usando a função `add.objective()`. Os objetivos mais usado são:

- **return**: Maximizar o retorno esperado da carteira
- **risk**: Minimizar o risco da carteira
- **risk_budget**: Minimizar  a contribuição marginal do risco de cada ativo para o risco total da carteira
- **quadratic_utility**: Maximizar a função de utilidade quadrática da carteira
- **weight_concentration**: Minimizar a concentração dos pesos dos ativos na carteira

```{r}

# Adiciona a função objetivo, que é maximizar o retorno médio esperado da carteira

port_spec <- add.objective(port_spec, type = "return", name = "mean")

# Adiciona a função objetivo, que é minimizar o desvio padrão da carteira

port_spec <- add.objective(port_spec, type = "risk", name = "StdDev")

# Adiciona um objetivo para minimizar a contribuição marginal do risco de cada ativo para o risco total da carteira

port_spec <- add.objective(port_spec, type = "risk_budget", name = "var", min_prisk = 0.05, max_prisk = 0.1)

print(port_spec)

```

## Resolvendo o problema de otimização

Existem duas funções principais para resolver o problema de otimização da carteira: `optimize.portfolio()` e `optimize.portfolio.rebalancing()`. A função `optimize.portfolio()` é usada para otimizar a carteira sem rebalanceamento, enquanto a função `optimize.portfolio.rebalancing()` é usada para otimizar a carteira com rebalanceamento.

Lembre-se que o rebalanceamento é o processo de ajustar os pesos dos ativos na carteira para manter a alocação desejada ao longo do tempo.

O pacote suporta diversos métodos de otimização, como:

- **DEoptim**: Differential Evolution 
- **random**: Random Portfolios 
- **GenSA**: Generalized Simulated Annealing 
- **pso**: Particle Swarm Optimization 
- **ROI**: R Optimization Infrastructure

O método a ser usado irá depender do problema. 

Vamos fazer fazer uma otimização usando o método de portifolios aleatórios. Nosso objetivo é maximizar o retorno esperado da carteira e minimizar o risco onde o risco minimo é 5% e o risco maximo é 10% sujeito a restrições de peso e de grupo.

```{r}
# .storage <<- new.env()

rp <- random_portfolios(port_spec, permutations = 1000, rp_method = 'simplex')
# rp <- random_portfolios(port_spec, permutations = 1000, rp_method = 'sample')
# rp <- random_portfolios(port_spec, permutations = 1000, rp_method = 'grid') 

print(rp)
```

Simplex: Distribui pesos aleatoriamente em um espaço triangular, garantindo que a soma seja sempre 1.
Sample: Seleciona pesos aleatórios de uma distribuição de probabilidade específica.
Grid: Gera pesos em pontos pré-definidos de uma grade regular.

```{r}
opt  <-  optimize.portfolio(R = asset_returns_xts, port_spec, rp = rp, optimize_method = "random", trace = TRUE)

print(opt)
```

## Otimizando a carteira com rebalanceamento

A função `optimize.portfolio.rebalancing()` é usada para otimizar a carteira com rebalanceamento. O rebalanceamento é o processo de ajustar os pesos dos ativos na carteira para manter a alocação desejada ao longo do tempo. O rebalanceamento é importante para garantir que a carteira permaneça alinhada com os objetivos de investimento (restrições e objetivos) ao longo do tempo.

a função `optimize.portfolio.rebalancing()` suporta otimização de carteiras com rebalanceamento em diferentes janelas de tempo, backtest. O backtest é o processo de testar uma estratégia de investimento em dados históricos para avaliar seu desempenho.

OBS: Dependendo do método de otimização, o processo pode ser demorado.

Exemplo de otimização com rebalanceamento:

```{r}

# Criar o objeto de portfólio
port_specr <- portfolio.spec(assets = colnames(asset_returns_xts))

# Adicionar restrições - full investment com soma de pesos igual a 1

port_specr <- add.constraint(port_specr, type = "long_only")

# restrição para a soma dos pesos

port_specr <- add.constraint(port_specr, type = "weight_sum", min_sum = 0.99, max_sum = 1.01)

# Adicionar a função objetivo - maximizar o retorno esperado

port_specr <- add.objective(port_specr, type = "return", name = "mean")

# Adicionar a função objetivo - minimizar o risco

port_specr <- add.objective(port_specr, type = "risk", name = "StdDev")

# Adicionar a função objetivo - minimizar a contribuição marginal do risco de cada ativo para o risco total da carteira

port_specr <- add.objective(port_specr, type = "risk_budget", name = "StdDev", min_prisk = 0.05, max_prisk = 0.1)

rp <- random_portfolios(port_specr, permutations = 50, rp_method = 'simplex')

```

## Otimização 

```{r}

# Otimização com rebalanceamento mensal

opt_rebal <- optimize.portfolio.rebalancing(R = asset_returns_xts, 
                      portfolio = port_specr, 
                      optimize_method = "random",
                      rp = rp,
                      trace = TRUE,
                      search_size = 1000,
                      rebalance_on = "months",
                      training_period = 12,
                      rolling_window = 12)

print(opt_rebal)

```

## Analise dos resultados

```{r}

extractObjectiveMeasures(opt_rebal)

extractWeights(opt_rebal)

chart.Weights(opt)

chart.Weights(opt_rebal)

```

## Plotando os pesos ao longo do tempo com ggplot2

```{r}

# Extraindo os pesos dos ativos ao longo do tempo

weights_xts <- extractWeights(opt_rebal)

# Convertendo os pesos para um data frame

weights_df <- weights_xts %>% 
              tk_tbl(preserve_index = TRUE, rename_index = "Date")


# Colocando o data frame em formato longo

weights_long_df <- weights_df %>% 
                pivot_longer(cols = -Date, names_to = "Asset", values_to = "Weight")


plotly::ggplotly(ggplot(weights_long_df) +
  aes(x = Date, y = Weight, colour = Asset) +
  geom_smooth(se = FALSE ) +
  scale_fill_hue(direction = 1) +
  labs(
    x = "Data",
    y = "Peso",
    title = "Peso dos ativos rebalanceados ao longo do tempo",
    colour = "Ativos"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 16L,
    face = "bold",
    hjust = 0.5)
  )
)

```

