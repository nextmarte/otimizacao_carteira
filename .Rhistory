RH_max = df$`Rh_max (porc)`,
RH_min = df$`Rh_min (porc)`,
z = df$`Altitude (m)`,
date = df$Date)
View(df)
## basic example code
#devtools::install_github("FilgueirasR/BrazilMet")
library(BrazilMet)
see_stations_info()
df<-download_AWS_INMET_daily(station = "A636", start_date = "2020-01-01", end_date = "2024-05-20")
df$eto <- daily_eto_FAO56(lat = df$`Latitude (degrees)`,
tmin = df$`Tair_min (c)`,
tmax = df$`Tair_max (c)`,
tmean = df$`Tair_mean (c)`,
Rs = df$`Sr (Mj m-2 day-1)`,
u2 = df$`Ws_2 (m s-1)`,
Patm = df$`Patm (mB)`,
RH_max = df$`Rh_max (porc)`,
RH_min = df$`Rh_min (porc)`,
z = df$`Altitude (m)`,
date = df$Date)
## basic example code
#devtools::install_github("FilgueirasR/BrazilMet")
library(BrazilMet)
see_stations_info()
df<-download_AWS_INMET_daily(station = "A636", start_date = "2015-01-01", end_date = "2024-05-20")
df$eto <- daily_eto_FAO56(lat = df$`Latitude (degrees)`,
tmin = df$`Tair_min (c)`,
tmax = df$`Tair_max (c)`,
tmean = df$`Tair_mean (c)`,
Rs = df$`Sr (Mj m-2 day-1)`,
u2 = df$`Ws_2 (m s-1)`,
Patm = df$`Patm (mB)`,
RH_max = df$`Rh_max (porc)`,
RH_min = df$`Rh_min (porc)`,
z = df$`Altitude (m)`,
date = df$Date)
## basic example code
#devtools::install_github("FilgueirasR/BrazilMet")
library(BrazilMet)
see_stations_info()
df<-download_AWS_INMET_daily(station = "A636", start_date = "2016-01-01", end_date = "2024-05-20")
df$eto <- daily_eto_FAO56(lat = df$`Latitude (degrees)`,
tmin = df$`Tair_min (c)`,
tmax = df$`Tair_max (c)`,
tmean = df$`Tair_mean (c)`,
Rs = df$`Sr (Mj m-2 day-1)`,
u2 = df$`Ws_2 (m s-1)`,
Patm = df$`Patm (mB)`,
RH_max = df$`Rh_max (porc)`,
RH_min = df$`Rh_min (porc)`,
z = df$`Altitude (m)`,
date = df$Date)
## basic example code
#devtools::install_github("FilgueirasR/BrazilMet")
library(BrazilMet)
see_stations_info()
df<-download_AWS_INMET_daily(station = "A636", start_date = "2017-01-01", end_date = "2024-05-20")
## basic example code
#devtools::install_github("FilgueirasR/BrazilMet")
library(BrazilMet)
see_stations_info()
df<-download_AWS_INMET_daily(station = "A636", start_date = "2018-01-01", end_date = "2024-05-20")
df$eto <- daily_eto_FAO56(lat = df$`Latitude (degrees)`,
tmin = df$`Tair_min (c)`,
tmax = df$`Tair_max (c)`,
tmean = df$`Tair_mean (c)`,
Rs = df$`Sr (Mj m-2 day-1)`,
u2 = df$`Ws_2 (m s-1)`,
Patm = df$`Patm (mB)`,
RH_max = df$`Rh_max (porc)`,
RH_min = df$`Rh_min (porc)`,
z = df$`Altitude (m)`,
date = df$Date)
View(df)
## basic example code
#devtools::install_github("FilgueirasR/BrazilMet")
library(BrazilMet)
see_stations_info()
df<-download_AWS_INMET_monthly(station = "A636", start_date = "2018-01-01", end_date = "2024-05-20")
??BrazilMet
View(df)
years <- seq(2018, 2020)
years = c("2018-01-01", "2019-01-01", "2020-01-01", "2021-01-01", "2022-01-01", "2023-01-01", "2024-01-01")
df <- map(download_AWS_INMET_daily, station = "A636", start_date = years, end_date = years)
library(tidyverse)
df <- map(download_AWS_INMET_daily, station = "A636", start_date = years, end_date = years)
df <- map(years, function(x) download_AWS_INMET_daily(station = "A636", start_date = x, end_date = x))
see_stations_info()
years = c("2018-01-01", "2019-01-01", "2020-01-01", "2021-01-01", "2022-01-01", "2023-01-01", "2024-01-01")
df <- map_df(years, function(x) download_AWS_INMET_daily(station = "A636", start_date = x, end_date = x))
df <- lapply(years, function(x) download_AWS_INMET_daily(station = "A636", start_date = x, end_date = x))
years = c("2018-01-01", "2019-01-01", "2020-01-01", "2021-01-01", "2022-01-01", "2023-01-01", "2024-01-01")
df <- lapply(years, function(x) download_AWS_INMET_daily(station = "A636", start_date = x))
library(BrazilMet)
see_stations_info()
years = c("2018-01-01", "2019-01-01", "2020-01-01", "2021-01-01", "2022-01-01", "2023-01-01", "2024-01-01")
df <- map_df(years, function(x) {
data <- tryCatch(
download_AWS_INMET_daily(station = "A636", start_date = x, end_date = x),
error = function(e) return(NULL)
)
if (!is.null(data)) {
return(data)
}
})
View(df)
library(BrazilMet)
see_stations_info()
years = c("2018", "2019", "2020", "2021", "2022", "2023")
df <- map_df(years, function(x) {
start_date = paste0(x, "-01-01")
end_date = paste0(as.numeric(x) + 1, "-01-01")
data <- tryCatch(
download_AWS_INMET_daily(station = "A636", start_date = start_date, end_date = end_date),
error = function(e) return(NULL)
)
if (!is.null(data)) {
return(data)
}
})
View(df)
View(df)
see_stations_info("A667")
see_stations_info(667)
see_stations_info()
teste <- see_stations_info()
View(teste)
knitr::opts_chunk$set(echo = TRUE)
options(scipen=30)
suppressMessages(library(tidyverse))
suppressMessages(library(lubridate))
suppressMessages(library(readxl))
suppressMessages(library(highcharter))
suppressMessages(library(tidyquant))
suppressMessages(library(tibbletime))
suppressMessages(library(quantmod))
suppressMessages(library(PerformanceAnalytics))
suppressMessages(library(scales))
suppressMessages(library(timetk))
library(here)
symbols <- c("SPY","EFA", "IJS", "EEM","AGG")
prices <-
getSymbols(symbols,
src = 'yahoo',
from = "2012-12-31",
to = "2017-12-31",
auto.assign = TRUE,
warnings = FALSE,) %>%
map(~Ad(get(.))) %>%
reduce(merge) %>%
`colnames<-`(symbols)
#to monthly prices
prices_monthly<-prices %>%
to.monthly(indexAt = "lastof", OHLC = FALSE)
#computing returns
asset_monthly_returns_xts <-
Return.calculate(prices_monthly,
method = "log") %>%
na.omit()
head(asset_monthly_returns_xts,3)
covariance_matrix <- cov(asset_monthly_returns_xts)
round(covariance_matrix,5)
w<-c(0.25,0.25,0.20,0.20,0.10) # os  pesos definidos para o portifolio
sd_matrix_algebra<- sqrt(t(w) %*% covariance_matrix %*% w)
sd_matrix_algebra_percent<-
round(sd_matrix_algebra*100,2)%>%
`colnames<-`("desvio padrão")
sd_matrix_algebra_percent[1,]
# computation of portfolio returns as before
portfolio_returns_xts_rebalanced_monthly<-Return.portfolio(asset_monthly_returns_xts,
weights = w,
rebalance_on = "months",
type= "discrete") %>%
`colnames<-`("returns")
# computation of std in xts
porfolio_sd_xts_builtin<-StdDev(portfolio_returns_xts_rebalanced_monthly, weigths=w)
porfolio_sd_xts_builtin_percent<-
round(porfolio_sd_xts_builtin*100, 2)
porfolio_sd_xts_builtin_percent[1,1]
# convert the index to a date xts package
asset_monthly_returns_long_tbl<-
asset_monthly_returns_xts %>%
data.frame(date = index(.)) %>%
# now remove the index because it got converted to row names
remove_rownames() %>%
gather(asset, returns, -date)
# inserting the weights
asset_monthly_returns_long_with_weights_tbl<-
asset_monthly_returns_long_tbl %>%
group_by(asset) %>%
na.omit() %>%
mutate(weights = case_when(
asset==symbols[1] ~ w[1],
asset==symbols[2] ~ w[2],
asset==symbols[3] ~ w[3],
asset==symbols[4] ~ w[4],
asset==symbols[5] ~ w[5]))
#computing portfolio retuns
portifolio_monthly_returns_dplyr_byhand<-
asset_monthly_returns_long_with_weights_tbl %>%
mutate(weighted_returns = returns*weights) %>%
group_by(date) %>%
summarise(returns = sum(weighted_returns))
head(portifolio_monthly_returns_dplyr_byhand, 4)
portfolio_sd_tidyverse <-
portifolio_monthly_returns_dplyr_byhand %>%
summarise(dplyr = sd(returns)) %>%
mutate(dplyr = round(dplyr, 4) * 100)
portfolio_sd_tidyverse
portfolio_sd_tq <-
portifolio_monthly_returns_dplyr_byhand %>%
tq_performance(Ra = returns,
Rb = NULL,
performance_fun = table.Stats) %>%
select(Stdev) %>%
mutate(tq_sd = round(Stdev, 4) * 100)
portfolio_sd_tq
portifolio_monthly_returns_dplyr_byhand %>%
ggplot(aes(x = date, y = returns)) +
geom_point(color = "darkblue") +
scale_x_date(breaks = pretty_breaks(n = 6)) +
ggtitle("Dispersão dos Retornos por data") +
theme(plot.title = element_text(hjust = 0.5))
# criamos os indicadores
sd_plot <-
sd(portifolio_monthly_returns_dplyr_byhand$returns)
mean_plot <-
mean(portifolio_monthly_returns_dplyr_byhand$returns)
portifolio_monthly_returns_dplyr_byhand %>%
mutate(faixa_inferior =
if_else(returns < (mean_plot - sd_plot),
returns, as.numeric(NA)),
faixa_superior =
if_else(returns > (mean_plot + sd_plot),
returns, as.numeric(NA)),
faixa_central =
if_else(returns > (mean_plot - sd_plot) &
returns < (mean_plot + sd_plot),
returns, as.numeric(NA))) %>%
ggplot(aes(x = date)) +
geom_point(aes(y = faixa_inferior),
color = "red") +
geom_point(aes(y = faixa_superior),
color = "green") +
geom_point(aes(y = faixa_central),
color = "blue") +
geom_hline(yintercept = (mean_plot + sd_plot),
color = "purple",
linetype = "dotted") +
geom_hline(yintercept = (mean_plot-sd_plot),
color = "purple",
linetype = "dotted") +
labs(title = "Distribuição Padronizada Colorida", y = "Retornos Mensais") +
scale_x_date(breaks = pretty_breaks(n = 8)) +
theme(plot.title = element_text(hjust = 0.5))
asset_monthly_returns_long_tbl %>%
group_by(asset) %>%
summarise(expected_return = mean(returns),
stand_dev = sd(returns)) %>%
add_row(asset = "Portfolio",
stand_dev =
sd(portifolio_monthly_returns_dplyr_byhand$returns),
expected_return =
mean(portifolio_monthly_returns_dplyr_byhand$returns)) %>%
ggplot(aes(x = stand_dev,
y = expected_return,
color = asset)) +
geom_point(size = 2) +
geom_text(
aes(x =
sd(portifolio_monthly_returns_dplyr_byhand$returns) * 1.11,
y =
mean(portifolio_monthly_returns_dplyr_byhand$returns),
label = "Portfolio")) +
ylab("expected return") +
xlab("standard deviation") +
ggtitle("Returns versus Risk") +
scale_y_continuous(label = scales::percent) +
scale_x_continuous(label = scales::percent, breaks = pretty_breaks(n = 10)) +
# The next line centers the title
theme_update(plot.title = element_text(hjust = 0.5))
window<-24
port_rolling_sd_xts <-
rollapply(portfolio_returns_xts_rebalanced_monthly,
FUN = sd,
width = window) %>%
# omit the 23 months for which there is no rolling 24
# month standard deviation
na.omit() %>%
`colnames<-`("rolling_sd")
head(port_rolling_sd_xts, 3)
port_rolling_sd_tq <-
portifolio_monthly_returns_dplyr_byhand %>%
tq_mutate(mutate_fun = rollapply,
width = window,
FUN = sd,
col_rename = "rolling_sd") %>%
select(date, rolling_sd) %>%
na.omit()
(head(port_rolling_sd_tq, 3))
(tail(port_rolling_sd_tq, 3))
sd_roll_24 <-
rollify(sd, window = window)
port_rolling_sd_tidy_tibbletime <-
portifolio_monthly_returns_dplyr_byhand %>%
as_tbl_time(index = date) %>%
mutate(sd = sd_roll_24(returns)) %>%
select(-returns) %>%
na.omit()
(head(port_rolling_sd_tidy_tibbletime, 3))
(tail(port_rolling_sd_tidy_tibbletime, 3))
# arredondando as percentagens
port_rolling_sd_xts_hc <-
round(port_rolling_sd_xts, 4) * 100
highchart(type = "stock") %>%
hc_add_series(port_rolling_sd_xts_hc,
color = "darkblue") %>%
hc_title(text = paste0(window, "-Month Rolling Volatility", sep = "")) %>%
hc_add_theme(hc_theme_flat()) %>%
hc_yAxis(
labels = list(format = "{value}%"),
opposite = FALSE) %>%
hc_navigator(enabled = FALSE) %>%
hc_scrollbar(enabled = FALSE) %>%
hc_exporting(enabled= TRUE) %>%
hc_legend(enabled = TRUE)
port_rolling_sd_tq %>%
ggplot(aes(x = date)) +
geom_line(aes(y = rolling_sd), color = "darkblue") +
scale_y_continuous(labels = scales::percent) +
scale_x_date(breaks = pretty_breaks(n = 8)) +
labs(title = "Rolling Standard Deviation", y = "") +
theme(plot.title = element_text(hjust = 0.5))
(marginal_contribution<-
w %*% covariance_matrix / sd_matrix_algebra[1, 1])
(component_contribution<-
marginal_contribution * w)
components_summed <- rowSums(component_contribution)
components_summed
component_percentages<-
component_contribution /  sd_matrix_algebra[1, 1]
round(component_percentages, 3)
component_contr_matrix_fun <- function(returns, w){
# create covariance matrix
covariance_matrix <-
cov(returns)
# calculate portfolio standard deviation
sd_portfolio <-
sqrt(t(w) %*% covariance_matrix %*% w)
# calculate marginal contribution of each asset
marginal_contribution <-
w %*% covariance_matrix / sd_portfolio[1, 1]
# multiply marginal by weights vecotr
component_contribution <-
marginal_contribution * w
# divide by total standard deviation to get percentages
component_percentages <-
component_contribution / sd_portfolio[1, 1]
component_percentages %>%
as_tibble() %>%
gather(asset, contribution)
}
test_the_function_xts<-
component_contr_matrix_fun(asset_monthly_returns_xts, w)
test_the_function_xts
# passando para tibble
asset_returns_tibble<-
asset_monthly_returns_xts %>%
tk_tbl(preserve_index = TRUE, rename_index = "date")
# utilizando a função passando um tibble
percentages_tibble<-
asset_returns_tibble %>%
select(-date) %>%
component_contr_matrix_fun(., w)
percentages_tibble
percentages_tibble %>%
ggplot(aes(x = asset, y = contribution)) +
geom_col(fill = 'darkblue',
colour = 'red',
width = .6) +
scale_y_continuous(labels = percent,
breaks = pretty_breaks(n = 20)) +
ggtitle("Percent Contribution to Standard Deviation") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("") +
ylab("Percent Contribution to Risk")
percentages_tibble %>%
mutate(weights = w) %>%
gather(type, percent, -asset) %>%
group_by(type) %>%
ggplot(aes(x = asset,
y = percent,
fill = type)) +
geom_col(position='dodge') +
scale_y_continuous(labels = percent) +
ggtitle("Percent Contribution to Volatility") +
theme(plot.title = element_text(hjust = 0.5))
install.packages("DT")
install.packages("languageserversetup")
languageserversetup::languageserver_install()
languageserversetup::languageserver_add_to_rprofile()
q()
pak::pak("r-lib/usethis")
install.packages("usethis")
pak::pak("r-lib/cli")
pkgbuild::check_build_tools(debug = TRUE)
install.packages("pkgbuild")
pkgbuild::check_build_tools(debug = TRUE)
pak::pak("r-lib/usethis")
pkgbuild::check_build_tools(debug = TRUE)
pak::pak("r-lib/usethis")
pak::pak("r-lib/cli")
pak::pak("r-lib/crayon")
.Last.error
setwd("C:/Users/nextm/OneDrive/Documents/otimizacao_carteira")
# Lista de pacotes necessários
pacotes <- c("tidyverse", "PortfolioAnalytics", "quantmod", "ROI", "ROI.plugin.quadprog", "ROI.plugin.glpk")
# Verifica se os pacotes estão instalados, instala os que faltam
for (pacote in pacotes) {
if (!require(pacote, character.only = TRUE)) {
install.packages(pacote)
library(pacote, character.only = TRUE)
}
}
# Ativos selecionados
tickers <- c("VALE3.SA","PETR4.SA","AZUL4.SA","MGLU3.SA", "CMIG4.SA")
# Baixa os preços
```{r}
# Ativos selecionados
tickers <- c("VALE3.SA","PETR4.SA","AZUL4.SA","MGLU3.SA", "CMIG4.SA")
prices <-
getSymbols(tickers,
src = 'yahoo',
from = "2019-05-30",
to = "2024-05-30",
auto.assign = TRUE, #obs auto asign carrega os resultados para o ambiente
warnings = FALSE,) %>%
map(~Ad(get(.))) %>%
reduce(merge) %>%
`colnames<-`(tickers)
head(prices)
class(prices)
#| echo: true
#| message: false
prices_monthly <- to.monthly(prices, indexAt = "lastof", OHLC = FALSE)
head(prices_monthly)
View(prices_monthly)
asset_returns_xts <-
PerformanceAnalytics::Return.calculate(prices_monthly,
method = "discrete") %>%
na.omit()
head(asset_returns_xts)
summary(asset_returns_xts)
View(asset_returns_xts)
#| message: false
# Criando o objeto de otimização
portf <- portfolio.spec(assets = colnames(asset_returns_xts))
# Adicionando restrições, como por exemplo, a soma dos pesos dos ativos deve ser igual a 1
portf <- add.constraint(portf, type = "full_investment")
# Adicionando restrição de peso mínimo e máximo para cada ativo
# Neste caso, o peso mínimo é 0 e o peso máximo é 1
portf <- add.constraint(portf, type = "long_only")
# Adiciona a função objetivo, que é minimizar o desvio padrão da carteira
portf <- add.objective(portf, type = "risk", name = "StdDev")
# Resolve o problema de otimização
opt_portf <- optimize.portfolio(asset_returns_xts, portf, optimize_method = "ROI")
View(opt_portf)
opt_portf
opt_portf$weights
View(opt_portf)
extractWeights(opt_portf)
pesos <- extractWeights(opt_portf)
pesos
class(pesos)
pesos <- extractWeights(opt_portf)
chart.weights(pesos)
pesos <- extractWeights(opt_portf)
chart.weights(opt_portf)
pesos <- extractWeights(opt_portf)
chart.Weights(opt_portf)
pesos <- extractWeights(opt_portf)
#plotando com ggplot
pesos %>%
as.data.frame() %>%
rownames_to_column("Ativo") %>%
ggplot(aes(x = Ativo, y = Weights)) +
geom_col() +
labs(title = "Pesos dos ativos na carteira otimizada",
x = "Ativo",
y = "Peso") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
pesos <- extractWeights(opt_portf)
#plotando com ggplot
pesos %>%
timetk::tk_tbl() %>%
as.data.frame() %>%
rownames_to_column("Ativo") %>%
ggplot(aes(x = Ativo, y = Weights)) +
geom_col() +
labs(title = "Pesos dos ativos na carteira otimizada",
x = "Ativo",
y = "Peso") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
pesos
# extraindo os pesos para um data frame
weights <- extractWeights(opt_portf)
# Adicionando os nomes dos ativos
weights <- data.frame(tickers = colnames(asset_returns_xts), weights)
weights
